#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt-SDK luci-app-campus-network-login-mt7620

on:
  repository_dispatch:
  workflow_dispatch:
  push:
    paths:
      - 'workflows/**'
      - '.github/workflows/openwrt-sdk-mt7620.yml'

env:
  BASE_URL: https://downloads.openwrt.org/releases
  TARGET_SYATEM: ramips
  SUBTARGET: mt7620
  RELEASE_VERSION: 24.10.0
  TOOLCHAIN: gcc-13.3.0_musl
  PACKAGE: luci-app-campus-network-login
  PACKAGE2: campus-network-login
  DIY_P_SH: workflows/diy-part.sh
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install zstd ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 下载 Openwrt SDK
      working-directory: /workdir
      run: |
        df -hT $PWD
        if [ "$RELEASE_VERSION" == "24.10.0" ]; then
          EXTENSION="tar.zst"
        else
          EXTENSION="tar.xz"
        fi
        SDK_NAME="openwrt-sdk-${{ env.RELEASE_VERSION }}-${{ env.TARGET_SYATEM }}-${{ env.SUBTARGET }}_${{ env.TOOLCHAIN }}.Linux-x86_64.${EXTENSION}"
        FULL_URL="${{ env.BASE_URL }}/${{ env.RELEASE_VERSION }}/targets/${{ env.TARGET_SYATEM }}/${{ env.SUBTARGET }}/${SDK_NAME}"
        wget $FULL_URL
        if [ "${{ env.RELEASE_VERSION }}" == "24.10.0" ]; then
          mkdir sdk && tar --zstd -xvf $SDK_NAME -C ./sdk --strip-components=1
        else
          mkdir sdk && tar -xvf $SDK_NAME -C ./sdk --strip-components=1
        fi
        ln -sf /workdir/sdk $GITHUB_WORKSPACE/sdk

    - name: 更新&&下载 feeds
      run: |
        pwd
        cd sdk
        git clone https://github.com/${{ github.repository }}.git package/${{ env.PACKAGE }}
        ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: 配置.config
      run: |
        chmod +x $DIY_P_SH
        cd sdk
        $GITHUB_WORKSPACE/$DIY_P_SH

    - name: 下载 package
      id: package
      run: |
        cd sdk
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译插件
      id: compile
      run: |
        cd sdk
        echo -e "make package/${{ env.PACKAGE }}/{clean,compile} -j$(nproc)"
        make package/${{ env.PACKAGE }}/{clean,compile} -j$(nproc)
        echo "status=success" >> $GITHUB_OUTPUT
        cd bin/packages/*/base/
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")-${{ env.TARGET_SYATEM }}-${{ env.SUBTARGET }}-openwrt${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*${{ env.PACKAGE2 }}*.ipk

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
